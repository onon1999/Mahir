{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNBsQH0yJsLKVT9Bqjks3On"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"18bd375e2c75450b9326a4bcb660fa37":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b02336fcfc304b068bda9b816c25f0f2","IPY_MODEL_6b52ede740d041ef89489d1977d69513","IPY_MODEL_4824b40b42c548b9bc28c9bcc1e2b154"],"layout":"IPY_MODEL_409b7227e77c4c4aa049b00843536ce0"}},"b02336fcfc304b068bda9b816c25f0f2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b4e243aeb5384eb688c129a55019cdbb","placeholder":"​","style":"IPY_MODEL_c551a821701744aca482c1dee951aa54","value":"100%"}},"6b52ede740d041ef89489d1977d69513":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_69768165bffb451d8715f52a3e7dc2f4","max":20,"min":0,"orientation":"horizontal","style":"IPY_MODEL_4f9cfa2c680048299f46cbae304bf35a","value":20}},"4824b40b42c548b9bc28c9bcc1e2b154":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_adee04751e384c52ac298ba94ee2d57a","placeholder":"​","style":"IPY_MODEL_84cfcb867bf841808d1aa93ffc46cd8b","value":" 20/20 [00:00&lt;00:00, 686.21it/s]"}},"409b7227e77c4c4aa049b00843536ce0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b4e243aeb5384eb688c129a55019cdbb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c551a821701744aca482c1dee951aa54":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"69768165bffb451d8715f52a3e7dc2f4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4f9cfa2c680048299f46cbae304bf35a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"adee04751e384c52ac298ba94ee2d57a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"84cfcb867bf841808d1aa93ffc46cd8b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2eb62be58d0d496cabd6f1009e36c001":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a84ceb2524114b248bbade1c4bbacbbd","IPY_MODEL_c9e2459cd2c14c2cbec6768783fb3f63","IPY_MODEL_39ff9562ac114a5ea9145385d45ad902"],"layout":"IPY_MODEL_13999a483ea04780a917e2b0fc0b6711"}},"a84ceb2524114b248bbade1c4bbacbbd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f55d75317b084dd286a746a1cc1b6b80","placeholder":"​","style":"IPY_MODEL_423c6713a3174504b04039f4f5021efa","value":"100%"}},"c9e2459cd2c14c2cbec6768783fb3f63":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a12cdcca064f48d2bd3582919cabbd32","max":20,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b3999c8e0b374bcb95bb12dd52502056","value":20}},"39ff9562ac114a5ea9145385d45ad902":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f4f085dd59534a5da164d4568ed6c139","placeholder":"​","style":"IPY_MODEL_94bb246eb94546ddae7c1c010aabe492","value":" 20/20 [00:00&lt;00:00, 41.85it/s]"}},"13999a483ea04780a917e2b0fc0b6711":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f55d75317b084dd286a746a1cc1b6b80":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"423c6713a3174504b04039f4f5021efa":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a12cdcca064f48d2bd3582919cabbd32":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b3999c8e0b374bcb95bb12dd52502056":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f4f085dd59534a5da164d4568ed6c139":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"94bb246eb94546ddae7c1c010aabe492":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"nUKf2ey8K1FD","executionInfo":{"status":"ok","timestamp":1720027123745,"user_tz":-360,"elapsed":458,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sQWNljkWT664","executionInfo":{"status":"ok","timestamp":1720030776387,"user_tz":-360,"elapsed":16056,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"38f6a286-95af-4084-e834-87e88f38e62d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.25.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n","Requirement already satisfied: wordcloud in /usr/local/lib/python3.10/dist-packages (1.9.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n","Requirement already satisfied: numpy>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from wordcloud) (1.25.2)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from wordcloud) (9.4.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.53.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"]}],"source":["!pip install pandas numpy\n","!pip install wordcloud matplotlib\n"]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Define the paths to your behaviors.tsv and news.tsv files\n","behaviors_path = '/content/behaviors.tsv'\n","news_path = '/content/news.tsv'\n","\n","\n","# Read behaviors.tsv\n","behaviors = pd.read_csv(behaviors_path, sep='\\t', header=None,\n","                        names=['Impression_ID', 'User_ID', 'Time', 'History', 'Impressions'])\n","\n","# Handle news.tsv, skipping problematic lines\n","news_data = []\n","with open(news_path, 'r', encoding='utf-8') as file:\n","    for line_num, line in enumerate(file):\n","        try:\n","            parts = line.strip().split('\\t')\n","            if len(parts) == 8:\n","                news_data.append(parts)\n","            else:\n","                print(f\"Ignoring line {line_num + 1}: {line}\")\n","        except Exception as e:\n","            print(f\"Error processing line {line_num + 1}: {e}\")\n","\n","# Create DataFrame from cleaned data\n","news_columns = ['News_ID', 'Category', 'SubCategory', 'Title', 'Abstract', 'URL', 'Title_Entities', 'Abstract_Entities']\n","news = pd.DataFrame(news_data, columns=news_columns)\n","\n","# Proceed with the rest of your data preprocessing steps"],"metadata":{"id":"7F9QY0jepIVn","executionInfo":{"status":"ok","timestamp":1720030782192,"user_tz":-360,"elapsed":5809,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# Drop rows where 'Title' or 'Abstract' is NaN\n","news.dropna(subset=['Title', 'Abstract'], inplace=True)\n","\n","# Reset index after dropping rows\n","news.reset_index(drop=True, inplace=True)\n","\n","# Verify the cleaned DataFrame\n","print(news.head())\n","\n","# Now proceed with the next steps of preprocessing or embedding\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QgTWE8H2rvLZ","executionInfo":{"status":"ok","timestamp":1720030782193,"user_tz":-360,"elapsed":8,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"1bc281e6-8f2f-41ed-fe3e-a609c50f66f8"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["  News_ID   Category      SubCategory  \\\n","0  N55528  lifestyle  lifestyleroyals   \n","1  N19639     health       weightloss   \n","2  N61837       news        newsworld   \n","3  N53526     health           voices   \n","4  N38324     health          medical   \n","\n","                                               Title  \\\n","0  The Brands Queen Elizabeth, Prince Charles, an...   \n","1                      50 Worst Habits For Belly Fat   \n","2  The Cost of Trump's Aid Freeze in the Trenches...   \n","3  I Was An NBA Wife. Here's How It Affected My M...   \n","4  How to Get Rid of Skin Tags, According to a De...   \n","\n","                                            Abstract  \\\n","0  Shop the notebooks, jackets, and more that the...   \n","1  These seemingly harmless habits are holding yo...   \n","2  Lt. Ivan Molchanets peeked over a parapet of s...   \n","3  I felt like I was a fraud, and being an NBA wi...   \n","4  They seem harmless, but there's a very good re...   \n","\n","                                             URL  \\\n","0  https://assets.msn.com/labs/mind/AAGH0ET.html   \n","1  https://assets.msn.com/labs/mind/AAB19MK.html   \n","2  https://assets.msn.com/labs/mind/AAJgNsz.html   \n","3  https://assets.msn.com/labs/mind/AACk2N6.html   \n","4  https://assets.msn.com/labs/mind/AAAKEkt.html   \n","\n","                                      Title_Entities  \\\n","0  [{\"Label\": \"Prince Philip, Duke of Edinburgh\",...   \n","1  [{\"Label\": \"Adipose tissue\", \"Type\": \"C\", \"Wik...   \n","2                                                 []   \n","3                                                 []   \n","4  [{\"Label\": \"Skin tag\", \"Type\": \"C\", \"WikidataI...   \n","\n","                                   Abstract_Entities  \n","0                                                 []  \n","1  [{\"Label\": \"Adipose tissue\", \"Type\": \"C\", \"Wik...  \n","2  [{\"Label\": \"Ukraine\", \"Type\": \"G\", \"WikidataId...  \n","3  [{\"Label\": \"National Basketball Association\", ...  \n","4  [{\"Label\": \"Skin tag\", \"Type\": \"C\", \"WikidataI...  \n"]}]},{"cell_type":"code","source":["# Example of text preprocessing (you may customize this based on your needs)\n","import nltk\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords\n","from nltk.stem import WordNetLemmatizer\n","import string\n","\n","# Download NLTK resources if not already downloaded\n","nltk.download('punkt')\n","nltk.download('stopwords')\n","nltk.download('wordnet')\n","\n","# Text preprocessing function\n","def preprocess_text(text):\n","    # Tokenize text\n","    tokens = word_tokenize(text)\n","\n","    # Convert to lowercase\n","    tokens = [token.lower() for token in tokens]\n","\n","    # Remove punctuation and stopwords\n","    stop_words = set(stopwords.words('english') + list(string.punctuation))\n","    tokens = [token for token in tokens if token not in stop_words]\n","\n","    # Lemmatize tokens\n","    lemmatizer = WordNetLemmatizer()\n","    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n","\n","    return tokens\n","\n","# Example: Apply preprocessing to 'Title' and 'Abstract'\n","news['Title_Processed'] = news['Title'].apply(preprocess_text)\n","news['Abstract_Processed'] = news['Abstract'].apply(preprocess_text)\n","\n","# Example: Train Word2Vec model on processed text\n","from gensim.models import Word2Vec\n","\n","# Combine Title and Abstract processed tokens\n","corpus = news['Title_Processed'] + news['Abstract_Processed']\n","\n","# Train Word2Vec model\n","model = Word2Vec(sentences=corpus, vector_size=100, window=5, min_count=1, workers=4)\n","\n","# Save the trained model\n","model_path = 'word2vec_model.bin'\n","model.save(model_path)\n","\n","# Continue with similarity calculations, recommendation generation, etc.\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"05PwrV1nEsdJ","executionInfo":{"status":"ok","timestamp":1720030876875,"user_tz":-360,"elapsed":94689,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"1b51c6b7-8e20-40b0-c8aa-1b5ec9f407e8"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n"]}]},{"source":["import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","# Define the paths to your behaviors.tsv and news.tsv files\n","behaviors_path = '/content/behaviors.tsv'\n","news_path = '/content/news.tsv'\n","\n","\n","# Read behaviors.tsv\n","behaviors = pd.read_csv(behaviors_path, sep='\\t', header=None,\n","                        names=['Impression_ID', 'User_ID', 'Time', 'History', 'Impressions'])\n","\n","# Handle news.tsv, skipping problematic lines\n","news_data = []\n","with open(news_path, 'r', encoding='utf-8') as file:\n","    for line_num, line in enumerate(file):\n","        try:\n","            parts = line.strip().split('\\t')\n","            if len(parts) == 8:\n","                news_data.append(parts)\n","            else:\n","                print(f\"Ignoring line {line_num + 1}: {line}\")\n","        except Exception as e:\n","            print(f\"Error processing line {line_num + 1}: {e}\")\n","\n","# Create DataFrame from cleaned data\n","news_columns = ['News_ID', 'Category', 'SubCategory', 'Title', 'Abstract', 'URL', 'Title_Entities', 'Abstract_Entities']\n","news = pd.DataFrame(news_data, columns=news_columns) #This line creates the 'news' DataFrame\n","\n","# Drop rows where 'Title' or 'Abstract' is NaN\n","news.dropna(subset=['Title', 'Abstract'], inplace=True) #Now you can use the 'news' DataFrame\n","news.reset_index(drop=True, inplace=True)"],"cell_type":"code","metadata":{"id":"V6-bN3DZu12v","executionInfo":{"status":"ok","timestamp":1720030878199,"user_tz":-360,"elapsed":1410,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Example: TF-IDF vectorization\n","tfidf_vectorizer = TfidfVectorizer(max_features=20000)  # Limit the number of features to reduce memory usage\n","tfidf_matrix = tfidf_vectorizer.fit_transform(news['Title'] + ' ' + news['Abstract'])\n"],"metadata":{"id":"92QtS_nBu-R-","executionInfo":{"status":"ok","timestamp":1720030881365,"user_tz":-360,"elapsed":3172,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Example ground truth and predicted recommendations\n","ground_truth = {\n","    'user1': ['N19639', 'N61837'],\n","    'user2': ['N53526', 'N38324'],\n","    # More users and their actual interactions...\n","}\n","\n","predicted_recommendations = {\n","    'user1': ['N19639', 'N38324'],\n","    'user2': ['N61837', 'N53526'],\n","    # More users and their predicted recommendations...\n","}\n","\n","# Example function to compute evaluation metrics\n","def evaluate_recommender_system(ground_truth, predicted_recommendations, top_n=5):\n","    precision_values = []\n","    recall_values = []\n","    mrr_values = []\n","    ap_values = []\n","\n","    for user, actual_items in ground_truth.items():\n","        predicted_items = predicted_recommendations.get(user, [])\n","\n","        # Precision and Recall at K\n","        num_relevant = len(set(actual_items))\n","        num_recommended = min(top_n, len(predicted_items))\n","        num_correct = len(set(actual_items) & set(predicted_items[:top_n]))\n","\n","        precision = num_correct / num_recommended if num_recommended > 0 else 0\n","        recall = num_correct / num_relevant if num_relevant > 0 else 0\n","\n","        precision_values.append(precision)\n","        recall_values.append(recall)\n","\n","        # Mean Reciprocal Rank (MRR)\n","        mrr = 0\n","        for idx, item in enumerate(predicted_items[:top_n]):\n","            if item in actual_items:\n","                mrr = 1 / (idx + 1)\n","                break\n","        mrr_values.append(mrr)\n","\n","        # Average Precision (AP)\n","        ap = 0\n","        num_correct = 0\n","        for idx, item in enumerate(predicted_items):\n","            if item in actual_items:\n","                num_correct += 1\n","                ap += num_correct / (idx + 1)\n","        if num_correct > 0:\n","            ap /= num_correct\n","        ap_values.append(ap)\n","\n","    # Calculate overall metrics\n","    avg_precision = sum(precision_values) / len(precision_values)\n","    avg_recall = sum(recall_values) / len(recall_values)\n","    avg_mrr = sum(mrr_values) / len(mrr_values)\n","    avg_ap = sum(ap_values) / len(ap_values)\n","\n","    return {\n","        'Precision@{}'.format(top_n): avg_precision,\n","        'Recall@{}'.format(top_n): avg_recall,\n","        'MRR@{}'.format(top_n): avg_mrr,\n","        'MAP@{}'.format(top_n): avg_ap\n","    }\n","\n","# Example usage\n","evaluation_results = evaluate_recommender_system(ground_truth, predicted_recommendations, top_n=5)\n","print(\"Evaluation Results:\")\n","for metric, value in evaluation_results.items():\n","    print(f\"{metric}: {value}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3ENlHjn-vNyt","executionInfo":{"status":"ok","timestamp":1720030881367,"user_tz":-360,"elapsed":62,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"13d8a493-2809-4049-dbf6-af1f41e0669f"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Evaluation Results:\n","Precision@5: 0.5\n","Recall@5: 0.5\n","MRR@5: 0.75\n","MAP@5: 0.75\n"]}]},{"source":["!pip install implicit"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fw_AqJVV1fg2","executionInfo":{"status":"ok","timestamp":1720030998402,"user_tz":-360,"elapsed":11055,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"a409bc7c-626d-4ccf-a1fe-6a8b8e032251"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting implicit\n","  Downloading implicit-0.7.2-cp310-cp310-manylinux2014_x86_64.whl (8.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m31.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from implicit) (1.25.2)\n","Requirement already satisfied: scipy>=0.16 in /usr/local/lib/python3.10/dist-packages (from implicit) (1.11.4)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from implicit) (4.66.4)\n","Requirement already satisfied: threadpoolctl in /usr/local/lib/python3.10/dist-packages (from implicit) (3.5.0)\n","Installing collected packages: implicit\n","Successfully installed implicit-0.7.2\n"]}]},{"source":["!pip install implicit"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Avo59RYf1gph","executionInfo":{"status":"ok","timestamp":1720031016158,"user_tz":-360,"elapsed":14437,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"554eaa18-1331-4782-e603-b699ec792733"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: implicit in /usr/local/lib/python3.10/dist-packages (0.7.2)\n","Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from implicit) (1.25.2)\n","Requirement already satisfied: scipy>=0.16 in /usr/local/lib/python3.10/dist-packages (from implicit) (1.11.4)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from implicit) (4.66.4)\n","Requirement already satisfied: threadpoolctl in /usr/local/lib/python3.10/dist-packages (from implicit) (3.5.0)\n"]}]},{"source":["from implicit.als import AlternatingLeastSquares"],"cell_type":"code","metadata":{"id":"qRu29WYB1ont","executionInfo":{"status":"ok","timestamp":1720031025680,"user_tz":-360,"elapsed":463,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}}},"execution_count":11,"outputs":[]},{"source":["import pandas as pd\n","from scipy.sparse import csr_matrix\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.decomposition import TruncatedSVD\n","from implicit.als import AlternatingLeastSquares\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","# Sample news data\n","news = pd.DataFrame({\n","    'News_ID': ['N19639', 'N61837', 'N53526', 'N38324', 'N55528'],\n","    'Title': ['Title1', 'Title2', 'Title3', 'Title4', 'Title5'],\n","    'Abstract': ['Abstract1', 'Abstract2', 'Abstract3', 'Abstract4', 'Abstract5']\n","})\n","\n","# Sample user interactions data\n","user_interactions = pd.DataFrame({\n","    'user_id': ['user1', 'user1', 'user2', 'user2', 'user3', 'user3'],\n","    'news_id': ['N19639', 'N61837', 'N53526', 'N38324', 'N19639', 'N53526']\n","})\n","\n","# Create user-item interaction matrix\n","user_item_matrix = pd.pivot_table(user_interactions, index='user_id', columns='news_id', aggfunc=len, fill_value=0)\n","user_item_sparse = csr_matrix(user_item_matrix.values)\n","\n","# Apply ALS using implicit library for collaborative filtering\n","model = AlternatingLeastSquares(factors=10, regularization=0.1, iterations=20)\n","model.fit(user_item_sparse)\n","\n","# Get user and item factors\n","user_factors = model.user_factors\n","item_factors = model.item_factors\n","\n","# Calculate collaborative filtering similarities\n","collab_similarities = cosine_similarity(item_factors)\n","\n","# Prepare TF-IDF for content-based filtering\n","tfidf_vectorizer = TfidfVectorizer()\n","tfidf_matrix = tfidf_vectorizer.fit_transform(news['Title'] + ' ' + news['Abstract'])\n","\n","# Apply SVD to reduce dimensionality of TF-IDF matrix\n","svd = TruncatedSVD(n_components=min(100, tfidf_matrix.shape[1]))\n","tfidf_reduced = svd.fit_transform(tfidf_matrix)\n","\n","# Calculate content-based similarities\n","content_similarities = cosine_similarity(tfidf_reduced)\n","\n","# Subset content similarities to match items in collaborative filtering\n","# Get the list of news IDs present in the user interactions\n","interacted_news_ids = user_item_matrix.columns.tolist()\n","\n","# Filter content_similarities to include only these news IDs\n","content_similarities_subset = content_similarities[news['News_ID'].isin(interacted_news_ids), :][:, news['News_ID'].isin(interacted_news_ids)]\n","\n","# Combine content-based and collaborative filtering similarities\n","# Use the subsetted content similarities\n","combined_similarities = (content_similarities_subset * 0.5) + (collab_similarities * 0.5)\n","\n","# Function to get recommendations based on combined similarity matrix\n","def get_combined_recommendations(news_id, combined_similarities, indices, top_n=5):\n","    # Adjust index to account for subsetting\n","    idx = indices[news_id] - (len(news) - len(interacted_news_ids))\n","    sim_scores = list(enumerate(combined_similarities[idx]))\n","    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","    sim_scores = sim_scores[1:top_n+1]\n","    # Adjust article indices back to original DataFrame\n","    article_indices = [i[0] + (len(news) - len(interacted_news_ids)) for i in sim_scores]\n","    return news.iloc[article_indices]\n","# Map News_IDs to DataFrame indices\n","indices = pd.Series(news.index, index=news[\"News_ID\"])"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["18bd375e2c75450b9326a4bcb660fa37","b02336fcfc304b068bda9b816c25f0f2","6b52ede740d041ef89489d1977d69513","4824b40b42c548b9bc28c9bcc1e2b154","409b7227e77c4c4aa049b00843536ce0","b4e243aeb5384eb688c129a55019cdbb","c551a821701744aca482c1dee951aa54","69768165bffb451d8715f52a3e7dc2f4","4f9cfa2c680048299f46cbae304bf35a","adee04751e384c52ac298ba94ee2d57a","84cfcb867bf841808d1aa93ffc46cd8b"]},"id":"SHKm7kWF3dNI","executionInfo":{"status":"ok","timestamp":1720031529814,"user_tz":-360,"elapsed":474,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"4e693db7-f455-4264-cdb4-a7e70d6e1f3e"},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/20 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"18bd375e2c75450b9326a4bcb660fa37"}},"metadata":{}}]},{"cell_type":"code","source":["# Example: Get recommendations for a specific news article\n","news_id = 'N19639'  # Example news ID\n","recommended_articles = get_combined_recommendations(news_id, combined_similarities, indices)\n","\n","# Display the recommended articles\n","print(\"Recommended articles for News ID:\", news_id)\n","print(recommended_articles[['News_ID', 'Title', 'Abstract']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CTYbwtf54E_l","executionInfo":{"status":"ok","timestamp":1720031666296,"user_tz":-360,"elapsed":599,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"8d5846aa-cc16-4851-e517-a1d89df7a70d"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Recommended articles for News ID: N19639\n","  News_ID   Title   Abstract\n","1  N61837  Title2  Abstract2\n","2  N53526  Title3  Abstract3\n","3  N38324  Title4  Abstract4\n"]}]},{"cell_type":"code","source":["# Example ground truth and predicted recommendations\n","ground_truth = {\n","    'user1': ['N19639', 'N61837'],\n","    'user2': ['N53526', 'N38324'],\n","    'user3': ['N19639', 'N53526'],\n","}\n","\n","predicted_recommendations = {\n","    'user1': get_combined_recommendations('N19639', combined_similarities, indices)['News_ID'].tolist(),\n","    'user2': get_combined_recommendations('N53526', combined_similarities, indices)['News_ID'].tolist(),\n","    'user3': get_combined_recommendations('N19639', combined_similarities, indices)['News_ID'].tolist(),\n","}\n","\n","# Function to compute evaluation metrics\n","def evaluate_recommender_system(ground_truth, predicted_recommendations, top_n=5):\n","    precision_values = []\n","    recall_values = []\n","    mrr_values = []\n","    ap_values = []\n","\n","    for user, actual_items in ground_truth.items():\n","        predicted_items = predicted_recommendations.get(user, [])\n","\n","        # Precision and Recall at K\n","        num_relevant = len(set(actual_items))\n","        num_recommended = min(top_n, len(predicted_items))\n","        num_correct = len(set(actual_items) & set(predicted_items[:top_n]))\n","\n","        precision = num_correct / num_recommended if num_recommended > 0 else 0\n","        recall = num_correct / num_relevant if num_relevant > 0 else 0\n","\n","        precision_values.append(precision)\n","        recall_values.append(recall)\n","\n","        # Mean Reciprocal Rank (MRR)\n","        mrr = 0\n","        for idx, item in enumerate(predicted_items[:top_n]):\n","            if item in actual_items:\n","                mrr = 1 / (idx + 1)\n","                break\n","        mrr_values.append(mrr)\n","\n","        # Average Precision (AP)\n","        ap = 0\n","        num_correct = 0\n","        for idx, item in enumerate(predicted_items):\n","            if item in actual_items:\n","                num_correct += 1\n","                ap += num_correct / (idx + 1)\n","        if num_correct > 0:\n","            ap /= num_correct\n","        ap_values.append(ap)\n","\n","    # Calculate overall metrics\n","    avg_precision = sum(precision_values) / len(precision_values)\n","    avg_recall = sum(recall_values) / len(recall_values)\n","    avg_mrr = sum(mrr_values) / len(mrr_values)\n","    avg_ap = sum(ap_values) / len(ap_values)\n","\n","    return {\n","        'Precision@{}'.format(top_n): avg_precision,\n","        'Recall@{}'.format(top_n): avg_recall,\n","        'MRR@{}'.format(top_n): avg_mrr,\n","        'MAP@{}'.format(top_n): avg_ap\n","    }\n","\n","# Example usage\n","evaluation_results = evaluate_recommender_system(ground_truth, predicted_recommendations, top_n=5)\n","print(\"Evaluation Results:\")\n","for metric, value in evaluation_results.items():\n","    print(f\"{metric}: {value}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f6D-1fsy4K8W","executionInfo":{"status":"ok","timestamp":1720031690209,"user_tz":-360,"elapsed":452,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"c2db52b0-3fee-4c07-a496-2dd7ffa1fea0"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Evaluation Results:\n","Precision@5: 0.3333333333333333\n","Recall@5: 0.5\n","MRR@5: 0.8333333333333334\n","MAP@5: 0.8333333333333334\n"]}]},{"cell_type":"code","source":["import nltk\n","from nltk.corpus import stopwords\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.decomposition import TruncatedSVD\n","\n","nltk.download('stopwords')\n","stop_words = set(stopwords.words('english'))\n","\n","def preprocess_text(text):\n","    # Remove stop words\n","    words = [word for word in text.split() if word.lower() not in stop_words]\n","    return ' '.join(words)\n","\n","news['Title'] = news['Title'].apply(preprocess_text)\n","news['Abstract'] = news['Abstract'].apply(preprocess_text)\n","\n","tfidf_vectorizer = TfidfVectorizer()\n","tfidf_matrix = tfidf_vectorizer.fit_transform(news['Title'] + ' ' + news['Abstract'])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fWmvA0KO44Lm","executionInfo":{"status":"ok","timestamp":1720031875128,"user_tz":-360,"elapsed":441,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"8b7e2cad-64e4-4287-a45a-1795490ff568"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]}]},{"cell_type":"code","source":["# Assuming collab_similarities needs adjustment\n","collab_similarities_adjusted = collab_similarities[:content_similarities.shape[0], :content_similarities.shape[1]]\n","print(\"Shape of content_similarities:\", content_similarities.shape)\n","print(\"Shape of collab_similarities_adjusted:\", collab_similarities_adjusted.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3tXZEouD-iwI","executionInfo":{"status":"ok","timestamp":1720033460552,"user_tz":-360,"elapsed":504,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"b83ea45d-2d56-4266-fdbf-b21ca48a6060"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of content_similarities: (5, 5)\n","Shape of collab_similarities_adjusted: (4, 4)\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# Assuming collab_similarities needs adjustment\n","collab_similarities_adjusted = np.zeros(content_similarities.shape)\n","collab_similarities_adjusted[:collab_similarities.shape[0], :collab_similarities.shape[1]] = collab_similarities\n"],"metadata":{"id":"R0OCu53k_HT2","executionInfo":{"status":"ok","timestamp":1720033510397,"user_tz":-360,"elapsed":514,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["combined_similarities = (content_similarities * 0.5) + (collab_similarities_adjusted * 0.5)\n"],"metadata":{"id":"JEZ1xA3X_KxW","executionInfo":{"status":"ok","timestamp":1720033524225,"user_tz":-360,"elapsed":507,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.decomposition import TruncatedSVD\n","from scipy.sparse import csr_matrix\n","from sklearn.metrics.pairwise import cosine_similarity\n","from implicit.als import AlternatingLeastSquares\n","from sklearn.metrics import average_precision_score\n","\n","# Sample news data\n","news = pd.DataFrame({\n","    'News_ID': ['N19639', 'N61837', 'N53526', 'N38324', 'N55528'],\n","    'Title': ['Title1', 'Title2', 'Title3', 'Title4', 'Title5'],\n","    'Abstract': ['Abstract1', 'Abstract2', 'Abstract3', 'Abstract4', 'Abstract5']\n","})\n","\n","# Sample user interactions data\n","user_interactions = pd.DataFrame({\n","    'user_id': ['user1', 'user1', 'user2', 'user2', 'user3', 'user3'],\n","    'news_id': ['N19639', 'N61837', 'N53526', 'N38324', 'N19639', 'N53526']\n","})\n","\n","# Create user-item interaction matrix\n","user_item_matrix = pd.pivot_table(user_interactions, index='user_id', columns='news_id', aggfunc=len, fill_value=0)\n","user_item_sparse = csr_matrix(user_item_matrix.values)\n","\n","# Apply ALS using implicit library for collaborative filtering\n","model = AlternatingLeastSquares(factors=10, regularization=0.1, iterations=20)\n","model.fit(user_item_sparse)\n","\n","# Get user and item factors\n","user_factors = model.user_factors\n","item_factors = model.item_factors\n","\n","# Calculate collaborative filtering similarities\n","collab_similarities = cosine_similarity(item_factors)\n","\n","# Adjusted GridSearch for TF-IDF Vectorizer parameters\n","param_grid = {\n","    'max_df': [0.85, 1.0],  # Ensure max_df is always higher than min_df\n","    'min_df': [1, 5],\n","    'ngram_range': [(1, 1), (1, 2)]\n","}\n","\n","# Specify a suitable scoring metric (example: average_precision)\n","scoring = 'average_precision'\n","\n","grid_search = GridSearchCV(TfidfVectorizer(), param_grid, cv=5, scoring=scoring)\n","grid_search.fit(news['Title'] + ' ' + news['Abstract'])\n","best_tfidf_vectorizer = grid_search.best_estimator_\n","tfidf_matrix = best_tfidf_vectorizer.transform(news['Title'] + ' ' + news['Abstract'])\n","\n","# Apply SVD to reduce dimensionality of TF-IDF matrix\n","n_features = tfidf_matrix.shape[1]\n","n_components = min(100, n_features - 1)  # Ensure n_components is less than or equal to the number of features\n","svd = TruncatedSVD(n_components=n_components)\n","tfidf_reduced = svd.fit_transform(tfidf_matrix)\n","\n","# Calculate content-based similarities\n","content_similarities = cosine_similarity(tfidf_reduced)\n","\n","# Ensure collab_similarities and content_similarities have the same shape\n","if collab_similarities.shape != content_similarities.shape:\n","    collab_similarities_adjusted = np.zeros(content_similarities.shape)\n","    collab_similarities_adjusted[:collab_similarities.shape[0], :collab_similarities.shape[1]] = collab_similarities\n","\n","# Combine content-based and collaborative filtering similarities\n","combined_similarities = (content_similarities * 0.5) + (collab_similarities_adjusted * 0.5)\n","\n","# Function to get recommendations based on combined similarity matrix\n","def get_combined_recommendations(news_id, combined_similarities, indices, top_n=5):\n","    idx = indices[news_id]\n","    sim_scores = list(enumerate(combined_similarities[idx]))\n","    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","    sim_scores = sim_scores[1:top_n+1]\n","    article_indices = [i[0] for i in sim_scores]\n","    return news.iloc[article_indices]\n","\n","# Map News_IDs to DataFrame indices\n","indices = pd.Series(news.index, index=news['News_ID']).to_dict()\n","\n","# Get recommendations for a news article\n","news_id = 'N19639'  # Example news ID\n","recommended_articles = get_combined_recommendations(news_id, combined_similarities, indices)\n","print(recommended_articles[['News_ID', 'Title', 'Abstract']])\n","# Assuming recommended_articles contains the recommended articles DataFrame\n","# Let's assume there is a ground truth list of relevant articles for evaluation\n","\n","# Ground truth relevant articles for evaluation (for example purposes)\n","ground_truth = ['N19639', 'N61837', 'N38324']\n","\n","# Calculate Precision@5 and Recall@5\n","top_n = 5\n","relevant_count = 0\n","recommended_count = 0\n","correct_count = 0\n","\n","for i, row in recommended_articles.iterrows():\n","    if row['News_ID'] in ground_truth:\n","        relevant_count += 1\n","        if recommended_count < top_n:\n","            correct_count += 1\n","    recommended_count += 1\n","\n","precision_at_5 = correct_count / top_n\n","recall_at_5 = correct_count / len(ground_truth) if len(ground_truth) > 0 else 0.0\n","\n","# Calculate MRR@5\n","reciprocal_ranks = []\n","for i, row in recommended_articles.iterrows():\n","    if row['News_ID'] in ground_truth:\n","        rank = i + 1  # Rank starts from 1\n","        reciprocal_ranks.append(1.0 / rank)\n","        if len(reciprocal_ranks) >= top_n:\n","            break\n","\n","mrr_at_5 = np.mean(reciprocal_ranks) if reciprocal_ranks else 0.0\n","\n","# Calculate MAP@5\n","average_precision = 0.0\n","num_relevant = 0\n","for i, row in recommended_articles.iterrows():\n","    if row['News_ID'] in ground_truth:\n","        num_relevant += 1\n","        precision_at_i = num_relevant / (i + 1)\n","        average_precision += precision_at_i\n","\n","if num_relevant > 0:\n","    map_at_5 = average_precision / min(num_relevant, top_n)\n","else:\n","    map_at_5 = 0.0\n","\n","# Print evaluation results\n","print(f\"Precision@5: {precision_at_5}\")\n","print(f\"Recall@5: {recall_at_5}\")\n","print(f\"MRR@5: {mrr_at_5}\")\n","print(f\"MAP@5: {map_at_5}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":694,"referenced_widgets":["2eb62be58d0d496cabd6f1009e36c001","a84ceb2524114b248bbade1c4bbacbbd","c9e2459cd2c14c2cbec6768783fb3f63","39ff9562ac114a5ea9145385d45ad902","13999a483ea04780a917e2b0fc0b6711","f55d75317b084dd286a746a1cc1b6b80","423c6713a3174504b04039f4f5021efa","a12cdcca064f48d2bd3582919cabbd32","b3999c8e0b374bcb95bb12dd52502056","f4f085dd59534a5da164d4568ed6c139","94bb246eb94546ddae7c1c010aabe492"]},"id":"DY2ElhA2_dTg","executionInfo":{"status":"ok","timestamp":1720033723357,"user_tz":-360,"elapsed":622,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"bb9398f9-b1a5-4469-9a39-9a93bd354d7b"},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/20 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2eb62be58d0d496cabd6f1009e36c001"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["  News_ID   Title   Abstract\n","3  N38324  Title4  Abstract4\n","2  N53526  Title3  Abstract3\n","4  N55528  Title5  Abstract5\n","1  N61837  Title2  Abstract2\n","Precision@5: 0.4\n","Recall@5: 0.6666666666666666\n","MRR@5: 0.375\n","MAP@5: 0.625\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n","    scores = scorer(estimator, X_test)\n","TypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n","\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n","20 fits failed out of a total of 40.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","20 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 684, in _fit_and_score\n","    estimator.fit(X_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py\", line 2103, in fit\n","    X = super().fit_transform(raw_documents)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py\", line 1398, in fit_transform\n","    raise ValueError(\"max_df corresponds to < documents than min_df\")\n","ValueError: max_df corresponds to < documents than min_df\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan nan nan]\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Assuming user_item_sparse is defined as your sparse user-item interaction matrix\n","\n","# Count the number of non-zero elements in the sparse matrix\n","num_interactions = user_item_sparse.nnz\n","\n","# Print the number of user-item interactions\n","print(\"Number of user-item interactions:\", num_interactions)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HiG30GBYBVAi","executionInfo":{"status":"ok","timestamp":1720034091081,"user_tz":-360,"elapsed":543,"user":{"displayName":"Mahir Tajwar","userId":"07946050608390516943"}},"outputId":"2ab06833-3713-4d8f-e573-1bedcab5960b"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of user-item interactions: 6\n"]}]}]}